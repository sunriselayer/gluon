// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/customauth/pairing.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pairing
type Pairing struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Hex string of 20 bytes of output of Address() method of PublicKey
	Index     string    `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	PublicKey types.Any `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Pairing) Reset()         { *m = Pairing{} }
func (m *Pairing) String() string { return proto.CompactTextString(m) }
func (*Pairing) ProtoMessage()    {}
func (*Pairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b971e3bc1d64983, []int{0}
}
func (m *Pairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pairing.Merge(m, src)
}
func (m *Pairing) XXX_Size() int {
	return m.Size()
}
func (m *Pairing) XXX_DiscardUnknown() {
	xxx_messageInfo_Pairing.DiscardUnknown(m)
}

var xxx_messageInfo_Pairing proto.InternalMessageInfo

func (m *Pairing) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Pairing) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Pairing) GetPublicKey() types.Any {
	if m != nil {
		return m.PublicKey
	}
	return types.Any{}
}

func (m *Pairing) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Pairing)(nil), "gluon.customauth.Pairing")
}

func init() { proto.RegisterFile("gluon/customauth/pairing.proto", fileDescriptor_6b971e3bc1d64983) }

var fileDescriptor_6b971e3bc1d64983 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x6f, 0x81, 0x9a, 0x05, 0x45, 0x19, 0xdc, 0x0e, 0x6e, 0xc5, 0xd4, 0x05,
	0x47, 0x2a, 0x13, 0x63, 0xc2, 0xc8, 0x82, 0x02, 0x13, 0x4b, 0xe4, 0x24, 0xc6, 0x44, 0x24, 0x76,
	0x14, 0x3b, 0xa2, 0x79, 0x8b, 0x3e, 0x0c, 0x0f, 0xd1, 0x8d, 0x8a, 0x89, 0x09, 0x50, 0xf2, 0x22,
	0x28, 0x71, 0x2a, 0x10, 0x6c, 0x39, 0xf7, 0x7c, 0xe7, 0xe6, 0x58, 0x17, 0x62, 0x9e, 0x55, 0x52,
	0xb8, 0x71, 0xa5, 0xb4, 0xcc, 0x69, 0xa5, 0x1f, 0xdc, 0x82, 0xa6, 0x65, 0x2a, 0x38, 0x29, 0x4a,
	0xa9, 0xa5, 0x7d, 0xd2, 0xfb, 0xe4, 0xdb, 0x9f, 0x4d, 0x63, 0xa9, 0x72, 0xa9, 0xc2, 0xde, 0x77,
	0x8d, 0x30, 0xf0, 0xcc, 0xe1, 0x92, 0x4b, 0x33, 0xef, 0xbe, 0x86, 0xe9, 0x94, 0x4b, 0xc9, 0x33,
	0xe6, 0xf6, 0x2a, 0xaa, 0xee, 0x5d, 0x2a, 0xea, 0xc1, 0x9a, 0xff, 0xb6, 0x74, 0x9a, 0x33, 0xa5,
	0x69, 0x5e, 0x18, 0xe0, 0xf4, 0x05, 0xc0, 0xc3, 0x6b, 0x53, 0xc8, 0x26, 0x70, 0x2c, 0x9f, 0x04,
	0x2b, 0x11, 0x58, 0x80, 0xe5, 0xc4, 0x47, 0xaf, 0xcf, 0x67, 0xce, 0xf0, 0x7b, 0x2f, 0x49, 0x4a,
	0xa6, 0xd4, 0x8d, 0xee, 0xc0, 0xc0, 0x60, 0xb6, 0x03, 0xc7, 0xa9, 0x48, 0xd8, 0x1a, 0xfd, 0xeb,
	0xf8, 0xc0, 0x08, 0xfb, 0x02, 0xc2, 0xa2, 0x8a, 0xb2, 0x34, 0x0e, 0x1f, 0x59, 0x8d, 0xfe, 0x2f,
	0xc0, 0xf2, 0x78, 0xe5, 0x10, 0xd3, 0x83, 0xec, 0x7b, 0x10, 0x4f, 0xd4, 0xfe, 0x68, 0xfb, 0x3e,
	0xb7, 0x82, 0x89, 0xa1, 0xaf, 0x58, 0x6d, 0x5f, 0x42, 0x18, 0x97, 0x8c, 0x6a, 0x96, 0x84, 0x54,
	0xa3, 0x51, 0x1f, 0x9d, 0xfd, 0x89, 0xde, 0xee, 0x9f, 0xe0, 0x1f, 0x75, 0x0b, 0x36, 0x1f, 0x73,
	0x10, 0x4c, 0x86, 0x9c, 0xa7, 0xfd, 0xd5, 0xb6, 0xc1, 0x60, 0xd7, 0x60, 0xf0, 0xd9, 0x60, 0xb0,
	0x69, 0xb1, 0xb5, 0x6b, 0xb1, 0xf5, 0xd6, 0x62, 0xeb, 0x0e, 0x99, 0x53, 0xac, 0x7f, 0x1e, 0x43,
	0xd7, 0x05, 0x53, 0xd1, 0x41, 0xbf, 0xfc, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x39, 0xd5, 0xd0,
	0xc1, 0xad, 0x01, 0x00, 0x00,
}

func (m *Pairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPairing(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPairing(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPairing(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPairing(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairing(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPairing(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPairing(uint64(l))
	}
	l = m.PublicKey.Size()
	n += 1 + l + sovPairing(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovPairing(uint64(l))
	return n
}

func sovPairing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairing(x uint64) (n int) {
	return sovPairing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPairing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPairing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPairing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairing = fmt.Errorf("proto: unexpected end of group")
)
