// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/contract/lazy_contract.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LazyContract struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creditor      string     `protobuf:"bytes,2,opt,name=creditor,proto3" json:"creditor,omitempty"`
	Debtor        string     `protobuf:"bytes,3,opt,name=debtor,proto3" json:"debtor,omitempty"`
	AmountEscrow  types.Coin `protobuf:"bytes,4,opt,name=amount_escrow,json=amountEscrow,proto3" json:"amount_escrow"`
	AmountPending types.Coin `protobuf:"bytes,5,opt,name=amount_pending,json=amountPending,proto3" json:"amount_pending"`
	Expiry        time.Time  `protobuf:"bytes,6,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *LazyContract) Reset()         { *m = LazyContract{} }
func (m *LazyContract) String() string { return proto.CompactTextString(m) }
func (*LazyContract) ProtoMessage()    {}
func (*LazyContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_df50d0b8489692fb, []int{0}
}
func (m *LazyContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LazyContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LazyContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LazyContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LazyContract.Merge(m, src)
}
func (m *LazyContract) XXX_Size() int {
	return m.Size()
}
func (m *LazyContract) XXX_DiscardUnknown() {
	xxx_messageInfo_LazyContract.DiscardUnknown(m)
}

var xxx_messageInfo_LazyContract proto.InternalMessageInfo

func (m *LazyContract) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LazyContract) GetCreditor() string {
	if m != nil {
		return m.Creditor
	}
	return ""
}

func (m *LazyContract) GetDebtor() string {
	if m != nil {
		return m.Debtor
	}
	return ""
}

func (m *LazyContract) GetAmountEscrow() types.Coin {
	if m != nil {
		return m.AmountEscrow
	}
	return types.Coin{}
}

func (m *LazyContract) GetAmountPending() types.Coin {
	if m != nil {
		return m.AmountPending
	}
	return types.Coin{}
}

func (m *LazyContract) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*LazyContract)(nil), "gluon.contract.LazyContract")
}

func init() {
	proto.RegisterFile("gluon/contract/lazy_contract.proto", fileDescriptor_df50d0b8489692fb)
}

var fileDescriptor_df50d0b8489692fb = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xbd, 0x4e, 0xeb, 0x30,
	0x18, 0x8d, 0x73, 0x7b, 0xa3, 0x5e, 0xdf, 0xd2, 0x21, 0x42, 0x55, 0xc8, 0x90, 0x56, 0x9d, 0x3a,
	0xd9, 0x14, 0x56, 0xa6, 0x16, 0x98, 0x18, 0x50, 0xc4, 0xc4, 0x52, 0xe5, 0xc7, 0x44, 0x96, 0x1a,
	0x7f, 0x51, 0xe2, 0x42, 0xd3, 0xa7, 0xe8, 0x13, 0xf0, 0x3c, 0x1d, 0x3b, 0x32, 0x01, 0x6a, 0x5f,
	0x04, 0xc5, 0x76, 0x60, 0x65, 0xf3, 0xf1, 0xf9, 0xce, 0xf9, 0x8e, 0xce, 0x87, 0xc7, 0xd9, 0x72,
	0x05, 0x82, 0x26, 0x20, 0x64, 0x19, 0x25, 0x92, 0x2e, 0xa3, 0x4d, 0xbd, 0x68, 0x11, 0x29, 0x4a,
	0x90, 0xe0, 0xf6, 0xd5, 0x0c, 0x69, 0x7f, 0xfd, 0xd3, 0x0c, 0x32, 0x50, 0x14, 0x6d, 0x5e, 0x7a,
	0xca, 0x0f, 0x12, 0xa8, 0x72, 0xa8, 0x68, 0x1c, 0x55, 0x8c, 0x3e, 0x4f, 0x63, 0x26, 0xa3, 0x29,
	0x4d, 0x80, 0x0b, 0xc3, 0x0f, 0x33, 0x80, 0x6c, 0xc9, 0xa8, 0x42, 0xf1, 0xea, 0x89, 0x4a, 0x9e,
	0xb3, 0x4a, 0x46, 0x79, 0xa1, 0x07, 0xc6, 0xaf, 0x36, 0xee, 0xdd, 0x45, 0x9b, 0x7a, 0x6e, 0xf6,
	0xb8, 0x7d, 0x6c, 0xf3, 0xd4, 0x43, 0x23, 0x34, 0xe9, 0x84, 0x36, 0x4f, 0x5d, 0x1f, 0x77, 0x93,
	0x92, 0xa5, 0x5c, 0x42, 0xe9, 0xd9, 0x23, 0x34, 0xf9, 0x17, 0x7e, 0x63, 0x77, 0x80, 0x9d, 0x94,
	0xc5, 0x0d, 0xf3, 0x47, 0x31, 0x06, 0xb9, 0xd7, 0xf8, 0x24, 0xca, 0x61, 0x25, 0xe4, 0x82, 0x55,
	0x49, 0x09, 0x2f, 0x5e, 0x67, 0x84, 0x26, 0xff, 0x2f, 0xce, 0x88, 0x4e, 0x4b, 0x9a, 0xb4, 0xc4,
	0xa4, 0x25, 0x73, 0xe0, 0x62, 0xd6, 0xd9, 0xbd, 0x0f, 0xad, 0xb0, 0xa7, 0x55, 0x37, 0x4a, 0xe4,
	0xde, 0xe2, 0xbe, 0x71, 0x29, 0x98, 0x48, 0xb9, 0xc8, 0xbc, 0xbf, 0xbf, 0xb3, 0x31, 0xcb, 0xef,
	0xb5, 0xca, 0xbd, 0xc2, 0x0e, 0x5b, 0x17, 0xbc, 0xac, 0x3d, 0x47, 0xe9, 0x7d, 0xa2, 0x4b, 0x21,
	0x6d, 0x29, 0xe4, 0xa1, 0x2d, 0x65, 0xd6, 0x6d, 0x0c, 0xb6, 0x1f, 0x43, 0x14, 0x1a, 0xcd, 0xec,
	0x7c, 0x77, 0x08, 0xd0, 0xfe, 0x10, 0xa0, 0xcf, 0x43, 0x80, 0xb6, 0xc7, 0xc0, 0xda, 0x1f, 0x03,
	0xeb, 0xed, 0x18, 0x58, 0x8f, 0x03, 0x7d, 0xc5, 0xf5, 0xcf, 0x1d, 0x65, 0x5d, 0xb0, 0x2a, 0x76,
	0x94, 0xef, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xfe, 0x3e, 0xed, 0xe6, 0x01, 0x00,
	0x00,
}

func (m *LazyContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LazyContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LazyContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLazyContract(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountPending.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLazyContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.AmountEscrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLazyContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Debtor) > 0 {
		i -= len(m.Debtor)
		copy(dAtA[i:], m.Debtor)
		i = encodeVarintLazyContract(dAtA, i, uint64(len(m.Debtor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creditor) > 0 {
		i -= len(m.Creditor)
		copy(dAtA[i:], m.Creditor)
		i = encodeVarintLazyContract(dAtA, i, uint64(len(m.Creditor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLazyContract(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLazyContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovLazyContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LazyContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLazyContract(uint64(m.Id))
	}
	l = len(m.Creditor)
	if l > 0 {
		n += 1 + l + sovLazyContract(uint64(l))
	}
	l = len(m.Debtor)
	if l > 0 {
		n += 1 + l + sovLazyContract(uint64(l))
	}
	l = m.AmountEscrow.Size()
	n += 1 + l + sovLazyContract(uint64(l))
	l = m.AmountPending.Size()
	n += 1 + l + sovLazyContract(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovLazyContract(uint64(l))
	return n
}

func sovLazyContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLazyContract(x uint64) (n int) {
	return sovLazyContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LazyContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLazyContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LazyContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LazyContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creditor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLazyContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLazyContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creditor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debtor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLazyContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLazyContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debtor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountEscrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLazyContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLazyContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountEscrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLazyContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLazyContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPending.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLazyContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLazyContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLazyContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLazyContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLazyContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLazyContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLazyContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLazyContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLazyContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLazyContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLazyContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLazyContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLazyContract = fmt.Errorf("proto: unexpected end of group")
)
