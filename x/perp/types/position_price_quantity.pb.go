// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/perp/position_price_quantity.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PositionPriceQuantity
type PositionPriceQuantity struct {
	Owner             string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	PositionOrderHash string                `protobuf:"bytes,2,opt,name=position_order_hash,json=positionOrderHash,proto3" json:"position_order_hash,omitempty"`
	Price             string                `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity          cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=quantity,proto3,customtype=cosmossdk.io/math.Int" json:"quantity"`
}

func (m *PositionPriceQuantity) Reset()         { *m = PositionPriceQuantity{} }
func (m *PositionPriceQuantity) String() string { return proto.CompactTextString(m) }
func (*PositionPriceQuantity) ProtoMessage()    {}
func (*PositionPriceQuantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7a2687148403ab, []int{0}
}
func (m *PositionPriceQuantity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionPriceQuantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionPriceQuantity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionPriceQuantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionPriceQuantity.Merge(m, src)
}
func (m *PositionPriceQuantity) XXX_Size() int {
	return m.Size()
}
func (m *PositionPriceQuantity) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionPriceQuantity.DiscardUnknown(m)
}

var xxx_messageInfo_PositionPriceQuantity proto.InternalMessageInfo

func (m *PositionPriceQuantity) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PositionPriceQuantity) GetPositionOrderHash() string {
	if m != nil {
		return m.PositionOrderHash
	}
	return ""
}

func (m *PositionPriceQuantity) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func init() {
	proto.RegisterType((*PositionPriceQuantity)(nil), "gluon.perp.PositionPriceQuantity")
}

func init() {
	proto.RegisterFile("gluon/perp/position_price_quantity.proto", fileDescriptor_1b7a2687148403ab)
}

var fileDescriptor_1b7a2687148403ab = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xcf, 0x29, 0xcd,
	0xcf, 0xd3, 0x2f, 0x48, 0x2d, 0x2a, 0xd0, 0x2f, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b,
	0x2f, 0x28, 0xca, 0x4c, 0x4e, 0x8d, 0x2f, 0x2c, 0x4d, 0xcc, 0x2b, 0xc9, 0x2c, 0xa9, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0xab, 0xd4, 0x03, 0xa9, 0x94, 0x92, 0x4c, 0xce, 0x2f,
	0xce, 0xcd, 0x2f, 0x8e, 0x07, 0xcb, 0xe8, 0x43, 0x38, 0x10, 0x65, 0x52, 0x22, 0xe9, 0xf9, 0xe9,
	0xf9, 0x10, 0x71, 0x10, 0x0b, 0x22, 0xaa, 0xb4, 0x87, 0x91, 0x4b, 0x34, 0x00, 0x6a, 0x7c, 0x00,
	0xc8, 0xf4, 0x40, 0xa8, 0xe1, 0x42, 0x22, 0x5c, 0xac, 0xf9, 0xe5, 0x79, 0xa9, 0x45, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x1e, 0x97, 0x30, 0xdc, 0x35, 0xf9, 0x45, 0x29,
	0xa9, 0x45, 0xf1, 0x19, 0x89, 0xc5, 0x19, 0x12, 0x4c, 0x60, 0x35, 0x82, 0x30, 0x29, 0x7f, 0x90,
	0x8c, 0x47, 0x62, 0x71, 0x06, 0xc8, 0x14, 0xb0, 0xa3, 0x25, 0x98, 0x21, 0xa6, 0x80, 0x39, 0x42,
	0xee, 0x5c, 0x1c, 0x30, 0x4f, 0x48, 0xb0, 0x80, 0x24, 0x9c, 0xb4, 0x4f, 0xdc, 0x93, 0x67, 0xb8,
	0x75, 0x4f, 0x5e, 0x14, 0xe2, 0xe6, 0xe2, 0x94, 0x6c, 0xbd, 0xcc, 0x7c, 0xfd, 0xdc, 0xc4, 0x92,
	0x0c, 0x3d, 0xcf, 0xbc, 0x92, 0x4b, 0x5b, 0x74, 0xb9, 0xa0, 0x9e, 0xf1, 0xcc, 0x2b, 0x09, 0x82,
	0x6b, 0x76, 0xd2, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x21, 0x48,
	0xf8, 0x55, 0x40, 0x42, 0xb0, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x67, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x7c, 0x02, 0x09, 0x5c, 0x01, 0x00, 0x00,
}

func (m *PositionPriceQuantity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionPriceQuantity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionPriceQuantity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPositionPriceQuantity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPositionPriceQuantity(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PositionOrderHash) > 0 {
		i -= len(m.PositionOrderHash)
		copy(dAtA[i:], m.PositionOrderHash)
		i = encodeVarintPositionPriceQuantity(dAtA, i, uint64(len(m.PositionOrderHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPositionPriceQuantity(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPositionPriceQuantity(dAtA []byte, offset int, v uint64) int {
	offset -= sovPositionPriceQuantity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PositionPriceQuantity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPositionPriceQuantity(uint64(l))
	}
	l = len(m.PositionOrderHash)
	if l > 0 {
		n += 1 + l + sovPositionPriceQuantity(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPositionPriceQuantity(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovPositionPriceQuantity(uint64(l))
	return n
}

func sovPositionPriceQuantity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPositionPriceQuantity(x uint64) (n int) {
	return sovPositionPriceQuantity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PositionPriceQuantity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPositionPriceQuantity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionPriceQuantity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionPriceQuantity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionOrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionOrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPositionPriceQuantity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPositionPriceQuantity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPositionPriceQuantity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPositionPriceQuantity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPositionPriceQuantity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPositionPriceQuantity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPositionPriceQuantity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPositionPriceQuantity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPositionPriceQuantity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPositionPriceQuantity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPositionPriceQuantity = fmt.Errorf("proto: unexpected end of group")
)
