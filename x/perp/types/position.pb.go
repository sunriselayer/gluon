// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/perp/position.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PositionDirection
type PositionDirection int32

const (
	// Unspecified
	PositionDirection_POSITION_DIRECTION_UNSPECIFIED PositionDirection = 0
	// Long
	PositionDirection_POSITION_DIRECTION_LONG PositionDirection = 1
	// Short
	PositionDirection_POSITION_DIRECTION_SHORT PositionDirection = 2
)

var PositionDirection_name = map[int32]string{
	0: "POSITION_DIRECTION_UNSPECIFIED",
	1: "POSITION_DIRECTION_LONG",
	2: "POSITION_DIRECTION_SHORT",
}

var PositionDirection_value = map[string]int32{
	"POSITION_DIRECTION_UNSPECIFIED": 0,
	"POSITION_DIRECTION_LONG":        1,
	"POSITION_DIRECTION_SHORT":       2,
}

func (x PositionDirection) String() string {
	return proto.EnumName(PositionDirection_name, int32(x))
}

func (PositionDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_022a6b4781bcc3ba, []int{0}
}

// Position
type Position struct {
	Owner                string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	OrderHash            string                `protobuf:"bytes,2,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	DenomBase            string                `protobuf:"bytes,3,opt,name=denom_base,json=denomBase,proto3" json:"denom_base,omitempty"`
	DenomQuote           string                `protobuf:"bytes,4,opt,name=denom_quote,json=denomQuote,proto3" json:"denom_quote,omitempty"`
	Direction            PositionDirection     `protobuf:"varint,5,opt,name=direction,proto3,enum=gluon.perp.PositionDirection" json:"direction,omitempty"`
	Amount               cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	IsolatedMargin       bool                  `protobuf:"varint,7,opt,name=isolated_margin,json=isolatedMargin,proto3" json:"isolated_margin,omitempty"`
	IsolatedMarginAmount cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=isolated_margin_amount,json=isolatedMarginAmount,proto3,customtype=cosmossdk.io/math.Int" json:"isolated_margin_amount"`
	FundingFeeResetAt    time.Time             `protobuf:"bytes,9,opt,name=funding_fee_reset_at,json=fundingFeeResetAt,proto3,stdtime" json:"funding_fee_reset_at"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_022a6b4781bcc3ba, []int{0}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Position) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *Position) GetDenomBase() string {
	if m != nil {
		return m.DenomBase
	}
	return ""
}

func (m *Position) GetDenomQuote() string {
	if m != nil {
		return m.DenomQuote
	}
	return ""
}

func (m *Position) GetDirection() PositionDirection {
	if m != nil {
		return m.Direction
	}
	return PositionDirection_POSITION_DIRECTION_UNSPECIFIED
}

func (m *Position) GetIsolatedMargin() bool {
	if m != nil {
		return m.IsolatedMargin
	}
	return false
}

func (m *Position) GetFundingFeeResetAt() time.Time {
	if m != nil {
		return m.FundingFeeResetAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("gluon.perp.PositionDirection", PositionDirection_name, PositionDirection_value)
	proto.RegisterType((*Position)(nil), "gluon.perp.Position")
}

func init() { proto.RegisterFile("gluon/perp/position.proto", fileDescriptor_022a6b4781bcc3ba) }

var fileDescriptor_022a6b4781bcc3ba = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0x8d, 0x95, 0xd6, 0x93, 0x46, 0x67, 0x15, 0xc8, 0x0a, 0x4b, 0xaa, 0x5d, 0xa8,
	0x78, 0x49, 0xa4, 0x71, 0xe4, 0xb4, 0xbe, 0x8c, 0x45, 0x82, 0xb6, 0xa4, 0xdd, 0x85, 0x4b, 0xe4,
	0x2e, 0x6e, 0x1a, 0xd1, 0xf8, 0x09, 0xb1, 0x23, 0xe0, 0x5b, 0xec, 0xc3, 0xf0, 0x21, 0x76, 0x9c,
	0x38, 0x21, 0x0e, 0x03, 0xb5, 0x7c, 0x10, 0x14, 0x3b, 0xd1, 0x04, 0xec, 0xb2, 0x9b, 0xfd, 0xff,
	0xfd, 0x9f, 0x17, 0x3f, 0x8f, 0xf1, 0x5e, 0xb8, 0xcc, 0x80, 0x3b, 0x09, 0x4b, 0x13, 0x27, 0x01,
	0x11, 0xc9, 0x08, 0xb8, 0x9d, 0xa4, 0x20, 0x81, 0x60, 0x85, 0xec, 0x1c, 0xb5, 0xf6, 0xce, 0x40,
	0xc4, 0x20, 0x7c, 0x45, 0x1c, 0x7d, 0xd1, 0xb6, 0x56, 0x33, 0x84, 0x10, 0xb4, 0x9e, 0x9f, 0x0a,
	0xd5, 0x0a, 0x01, 0xc2, 0x25, 0x73, 0xd4, 0x6d, 0x96, 0xcd, 0x1d, 0x19, 0xc5, 0x4c, 0x48, 0x1a,
	0x27, 0xda, 0x70, 0xf0, 0x7b, 0x13, 0xd7, 0xc6, 0x45, 0x41, 0xd2, 0xc4, 0x5b, 0xf0, 0x89, 0xb3,
	0xd4, 0x40, 0x6d, 0xd4, 0xa9, 0x7b, 0xfa, 0x42, 0xf6, 0x31, 0x86, 0x34, 0x60, 0xa9, 0xbf, 0xa0,
	0x62, 0x61, 0x6c, 0x28, 0x54, 0x57, 0xca, 0x09, 0x15, 0x8b, 0x1c, 0x07, 0x8c, 0x43, 0xec, 0xcf,
	0xa8, 0x60, 0xc6, 0xa6, 0xc6, 0x4a, 0xe9, 0x52, 0xc1, 0x88, 0x85, 0xb7, 0x35, 0xfe, 0x98, 0x81,
	0x64, 0xc6, 0x1d, 0xc5, 0x75, 0xc4, 0xbb, 0x5c, 0x21, 0xaf, 0x70, 0x3d, 0x88, 0x52, 0x76, 0x96,
	0x77, 0x60, 0x6c, 0xb5, 0x51, 0x67, 0xe7, 0x70, 0xdf, 0xbe, 0x7e, 0xb3, 0x5d, 0x76, 0xd7, 0x2f,
	0x4d, 0xde, 0xb5, 0x9f, 0xf4, 0x70, 0x95, 0xc6, 0x90, 0x71, 0x69, 0x54, 0xf3, 0xc4, 0xdd, 0x67,
	0x17, 0x57, 0x56, 0xe5, 0xc7, 0x95, 0x75, 0x5f, 0xcf, 0x46, 0x04, 0x1f, 0xec, 0x08, 0x9c, 0x98,
	0xca, 0x85, 0xed, 0x72, 0xf9, 0xed, 0xeb, 0x0b, 0x5c, 0x0c, 0xcd, 0xe5, 0xd2, 0x2b, 0x42, 0xc9,
	0x13, 0x7c, 0x2f, 0x12, 0xb0, 0xa4, 0x92, 0x05, 0x7e, 0x4c, 0xd3, 0x30, 0xe2, 0xc6, 0xdd, 0x36,
	0xea, 0xd4, 0xbc, 0x9d, 0x52, 0x7e, 0xab, 0x54, 0x42, 0xf1, 0x83, 0x7f, 0x8c, 0x7e, 0x51, 0xbd,
	0x76, 0xfb, 0xea, 0xcd, 0xbf, 0x93, 0x1f, 0xe9, 0x5e, 0x4e, 0x71, 0x73, 0x9e, 0xf1, 0x20, 0xe2,
	0xa1, 0x3f, 0x67, 0xcc, 0x4f, 0x99, 0x60, 0xd2, 0xa7, 0xd2, 0xa8, 0xb7, 0x51, 0x67, 0xfb, 0xb0,
	0x65, 0xeb, 0x7d, 0xda, 0xe5, 0x3e, 0xed, 0x69, 0xb9, 0xcf, 0x6e, 0x2d, 0x2f, 0x7e, 0xfe, 0xd3,
	0x42, 0xde, 0x6e, 0x91, 0xe1, 0x98, 0x31, 0x2f, 0x8f, 0x3f, 0x92, 0x4f, 0x53, 0xbc, 0xfb, 0xdf,
	0x1c, 0xc9, 0x01, 0x36, 0xc7, 0xa3, 0x89, 0x3b, 0x75, 0x47, 0x43, 0xbf, 0xef, 0x7a, 0x83, 0x9e,
	0x3a, 0x9d, 0x0e, 0x27, 0xe3, 0x41, 0xcf, 0x3d, 0x76, 0x07, 0xfd, 0x46, 0x85, 0x3c, 0xc2, 0x0f,
	0x6f, 0xf0, 0xbc, 0x19, 0x0d, 0x5f, 0x37, 0x10, 0x79, 0x8c, 0x8d, 0x1b, 0xe0, 0xe4, 0x64, 0xe4,
	0x4d, 0x1b, 0x1b, 0xdd, 0xe7, 0x17, 0x2b, 0x13, 0x5d, 0xae, 0x4c, 0xf4, 0x6b, 0x65, 0xa2, 0xf3,
	0xb5, 0x59, 0xb9, 0x5c, 0x9b, 0x95, 0xef, 0x6b, 0xb3, 0xf2, 0x9e, 0xe8, 0xdf, 0xfe, 0x59, 0xff,
	0x77, 0xf9, 0x25, 0x61, 0x62, 0x56, 0x55, 0x4f, 0x7a, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0xa8, 0xbb, 0x0b, 0x0a, 0x03, 0x00, 0x00,
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.FundingFeeResetAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FundingFeeResetAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPosition(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	{
		size := m.IsolatedMarginAmount.Size()
		i -= size
		if _, err := m.IsolatedMarginAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.IsolatedMargin {
		i--
		if m.IsolatedMargin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Direction != 0 {
		i = encodeVarintPosition(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DenomQuote) > 0 {
		i -= len(m.DenomQuote)
		copy(dAtA[i:], m.DenomQuote)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.DenomQuote)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomBase) > 0 {
		i -= len(m.DenomBase)
		copy(dAtA[i:], m.DenomBase)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.DenomBase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	l = len(m.DenomBase)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	l = len(m.DenomQuote)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovPosition(uint64(m.Direction))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPosition(uint64(l))
	if m.IsolatedMargin {
		n += 2
	}
	l = m.IsolatedMarginAmount.Size()
	n += 1 + l + sovPosition(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FundingFeeResetAt)
	n += 1 + l + sovPosition(uint64(l))
	return n
}

func sovPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPosition(x uint64) (n int) {
	return sovPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomQuote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= PositionDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedMargin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsolatedMargin = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedMarginAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsolatedMarginAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingFeeResetAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.FundingFeeResetAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPosition = fmt.Errorf("proto: unexpected end of group")
)
