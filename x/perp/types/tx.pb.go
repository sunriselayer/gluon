// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/perp/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgMatchOrder
type MsgMatchOrder struct {
	Buyer           string                `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller          string                `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	OrderHashBuyer  string                `protobuf:"bytes,3,opt,name=order_hash_buyer,json=orderHashBuyer,proto3" json:"order_hash_buyer,omitempty"`
	OrderHashSeller string                `protobuf:"bytes,4,opt,name=order_hash_seller,json=orderHashSeller,proto3" json:"order_hash_seller,omitempty"`
	Price           string                `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity        cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=quantity,proto3,customtype=cosmossdk.io/math.Int" json:"quantity"`
}

func (m *MsgMatchOrder) Reset()         { *m = MsgMatchOrder{} }
func (m *MsgMatchOrder) String() string { return proto.CompactTextString(m) }
func (*MsgMatchOrder) ProtoMessage()    {}
func (*MsgMatchOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{2}
}
func (m *MsgMatchOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatchOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatchOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatchOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatchOrder.Merge(m, src)
}
func (m *MsgMatchOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatchOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatchOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatchOrder proto.InternalMessageInfo

func (m *MsgMatchOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgMatchOrder) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgMatchOrder) GetOrderHashBuyer() string {
	if m != nil {
		return m.OrderHashBuyer
	}
	return ""
}

func (m *MsgMatchOrder) GetOrderHashSeller() string {
	if m != nil {
		return m.OrderHashSeller
	}
	return ""
}

func (m *MsgMatchOrder) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

// MsgMatchOrderResponse
type MsgMatchOrderResponse struct {
}

func (m *MsgMatchOrderResponse) Reset()         { *m = MsgMatchOrderResponse{} }
func (m *MsgMatchOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMatchOrderResponse) ProtoMessage()    {}
func (*MsgMatchOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{3}
}
func (m *MsgMatchOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMatchOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMatchOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMatchOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMatchOrderResponse.Merge(m, src)
}
func (m *MsgMatchOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMatchOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMatchOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMatchOrderResponse proto.InternalMessageInfo

// MsgDepositCrossMargin
type MsgDepositCrossMargin struct {
	User   string                                   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Assets github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=assets,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"assets"`
}

func (m *MsgDepositCrossMargin) Reset()         { *m = MsgDepositCrossMargin{} }
func (m *MsgDepositCrossMargin) String() string { return proto.CompactTextString(m) }
func (*MsgDepositCrossMargin) ProtoMessage()    {}
func (*MsgDepositCrossMargin) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{4}
}
func (m *MsgDepositCrossMargin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositCrossMargin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositCrossMargin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositCrossMargin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositCrossMargin.Merge(m, src)
}
func (m *MsgDepositCrossMargin) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositCrossMargin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositCrossMargin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositCrossMargin proto.InternalMessageInfo

func (m *MsgDepositCrossMargin) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgDepositCrossMargin) GetAssets() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Assets
	}
	return nil
}

// MsgDepositCrossMarginResponse
type MsgDepositCrossMarginResponse struct {
}

func (m *MsgDepositCrossMarginResponse) Reset()         { *m = MsgDepositCrossMarginResponse{} }
func (m *MsgDepositCrossMarginResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositCrossMarginResponse) ProtoMessage()    {}
func (*MsgDepositCrossMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{5}
}
func (m *MsgDepositCrossMarginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositCrossMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositCrossMarginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositCrossMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositCrossMarginResponse.Merge(m, src)
}
func (m *MsgDepositCrossMarginResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositCrossMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositCrossMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositCrossMarginResponse proto.InternalMessageInfo

// MsgWithdrawCrossMargin
type MsgWithdrawCrossMargin struct {
	User   string                                   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Assets github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=assets,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"assets"`
}

func (m *MsgWithdrawCrossMargin) Reset()         { *m = MsgWithdrawCrossMargin{} }
func (m *MsgWithdrawCrossMargin) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCrossMargin) ProtoMessage()    {}
func (*MsgWithdrawCrossMargin) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{6}
}
func (m *MsgWithdrawCrossMargin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCrossMargin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCrossMargin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCrossMargin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCrossMargin.Merge(m, src)
}
func (m *MsgWithdrawCrossMargin) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCrossMargin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCrossMargin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCrossMargin proto.InternalMessageInfo

func (m *MsgWithdrawCrossMargin) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgWithdrawCrossMargin) GetAssets() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Assets
	}
	return nil
}

// MsgWithdrawCrossMarginResponse
type MsgWithdrawCrossMarginResponse struct {
}

func (m *MsgWithdrawCrossMarginResponse) Reset()         { *m = MsgWithdrawCrossMarginResponse{} }
func (m *MsgWithdrawCrossMarginResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCrossMarginResponse) ProtoMessage()    {}
func (*MsgWithdrawCrossMarginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e225f5c2c944e9, []int{7}
}
func (m *MsgWithdrawCrossMarginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCrossMarginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCrossMarginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCrossMarginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCrossMarginResponse.Merge(m, src)
}
func (m *MsgWithdrawCrossMarginResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCrossMarginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCrossMarginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCrossMarginResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "gluon.perp.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "gluon.perp.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgMatchOrder)(nil), "gluon.perp.MsgMatchOrder")
	proto.RegisterType((*MsgMatchOrderResponse)(nil), "gluon.perp.MsgMatchOrderResponse")
	proto.RegisterType((*MsgDepositCrossMargin)(nil), "gluon.perp.MsgDepositCrossMargin")
	proto.RegisterType((*MsgDepositCrossMarginResponse)(nil), "gluon.perp.MsgDepositCrossMarginResponse")
	proto.RegisterType((*MsgWithdrawCrossMargin)(nil), "gluon.perp.MsgWithdrawCrossMargin")
	proto.RegisterType((*MsgWithdrawCrossMarginResponse)(nil), "gluon.perp.MsgWithdrawCrossMarginResponse")
}

func init() { proto.RegisterFile("gluon/perp/tx.proto", fileDescriptor_e3e225f5c2c944e9) }

var fileDescriptor_e3e225f5c2c944e9 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcf, 0x4f, 0x13, 0x4f,
	0x14, 0xef, 0x02, 0x6d, 0xbe, 0x0c, 0x5f, 0x41, 0x07, 0x90, 0x76, 0x8d, 0x5b, 0xac, 0x97, 0x5a,
	0x61, 0x17, 0x30, 0xf1, 0xc0, 0xcd, 0x62, 0xa2, 0x98, 0x34, 0x92, 0x12, 0x63, 0xe2, 0x85, 0x4c,
	0xbb, 0x93, 0xdd, 0x0d, 0x74, 0x67, 0x9d, 0x37, 0x45, 0xb8, 0x19, 0xaf, 0x5e, 0xfc, 0x3b, 0x3c,
	0x71, 0x40, 0x6f, 0xde, 0x39, 0x12, 0x4e, 0xc6, 0x03, 0x1a, 0x38, 0xf0, 0x17, 0x78, 0x37, 0xf3,
	0xa3, 0xdb, 0x52, 0x2b, 0xf5, 0xea, 0x69, 0x77, 0xe6, 0xf3, 0x79, 0xef, 0xf3, 0x79, 0x6f, 0xe6,
	0x0d, 0x9a, 0x0e, 0x76, 0xda, 0x2c, 0xf6, 0x12, 0xca, 0x13, 0x4f, 0xec, 0xb9, 0x09, 0x67, 0x82,
	0x61, 0xa4, 0x36, 0x5d, 0xb9, 0x69, 0x3b, 0x4d, 0x06, 0x2d, 0x06, 0x5e, 0x83, 0x00, 0xf5, 0x76,
	0x97, 0x1b, 0x54, 0x90, 0x65, 0xaf, 0xc9, 0xa2, 0x58, 0x73, 0xed, 0x39, 0x83, 0xb7, 0x20, 0xf0,
	0x76, 0x97, 0xe5, 0xc7, 0x00, 0x05, 0x0d, 0x6c, 0xa9, 0x95, 0xa7, 0x17, 0x9d, 0x98, 0x1e, 0xd1,
	0x84, 0x70, 0xd2, 0xea, 0x00, 0x33, 0x01, 0x0b, 0x98, 0x0e, 0x90, 0x7f, 0x7a, 0xb7, 0xf4, 0xde,
	0x42, 0x53, 0x35, 0x08, 0x5e, 0x24, 0x3e, 0x11, 0x74, 0x43, 0xf1, 0xf1, 0x43, 0x34, 0x4e, 0xda,
	0x22, 0x64, 0x3c, 0x12, 0xfb, 0x79, 0x6b, 0xde, 0x2a, 0x8f, 0x57, 0xf3, 0x27, 0x87, 0x8b, 0x33,
	0x46, 0xe7, 0x91, 0xef, 0x73, 0x0a, 0xb0, 0x29, 0x78, 0x14, 0x07, 0xf5, 0x2e, 0x15, 0x2f, 0xa1,
	0x9c, 0x56, 0xcc, 0x8f, 0xcc, 0x5b, 0xe5, 0x89, 0x15, 0xec, 0x76, 0x6b, 0x75, 0x75, 0xee, 0xea,
	0xd8, 0xd1, 0x69, 0x31, 0x53, 0x37, 0xbc, 0xd5, 0xc9, 0x77, 0x17, 0x07, 0x95, 0x6e, 0x86, 0x52,
	0x01, 0xcd, 0xf5, 0x99, 0xa9, 0x53, 0x48, 0x58, 0x0c, 0xb4, 0xf4, 0x65, 0x04, 0x5d, 0xab, 0x41,
	0x50, 0x23, 0xa2, 0x19, 0x3e, 0xe7, 0x3e, 0xe5, 0xd8, 0x45, 0xd9, 0x46, 0x7b, 0x9f, 0xf2, 0xa1,
	0x16, 0x35, 0x4d, 0xda, 0x03, 0xba, 0xb3, 0x43, 0xb9, 0xb2, 0x77, 0x55, 0x80, 0xe1, 0xe1, 0x32,
	0xba, 0xce, 0xa4, 0xd4, 0x56, 0x48, 0x20, 0xdc, 0xd2, 0x62, 0xa3, 0x32, 0xb6, 0x3e, 0xa9, 0xf6,
	0x9f, 0x12, 0x08, 0xab, 0x2a, 0x77, 0x05, 0xdd, 0xe8, 0x61, 0x1a, 0x99, 0x31, 0x45, 0x9d, 0x4a,
	0xa9, 0x9b, 0x3a, 0xeb, 0x0c, 0xca, 0x26, 0x3c, 0x6a, 0xd2, 0x7c, 0x56, 0xe1, 0x7a, 0x81, 0x9f,
	0xa0, 0xff, 0x5e, 0xb7, 0x49, 0x2c, 0x64, 0xcf, 0x73, 0xca, 0xdf, 0x7d, 0xd9, 0xaa, 0x6f, 0xa7,
	0xc5, 0x59, 0xed, 0x11, 0xfc, 0x6d, 0x37, 0x62, 0x5e, 0x8b, 0x88, 0xd0, 0x5d, 0x8f, 0xc5, 0xc9,
	0xe1, 0x22, 0x32, 0xe6, 0xd7, 0x63, 0x51, 0x4f, 0x83, 0x57, 0x67, 0x65, 0x4f, 0x75, 0xc9, 0xf2,
	0xcf, 0xd4, 0x52, 0x9a, 0x43, 0xb3, 0x97, 0xda, 0x97, 0x36, 0xf6, 0x93, 0xa5, 0x90, 0xc7, 0x34,
	0x61, 0x10, 0x89, 0x35, 0xce, 0x00, 0x6a, 0x84, 0x07, 0x51, 0x8c, 0x17, 0xd0, 0x58, 0x1b, 0xfe,
	0xa2, 0xbf, 0x8a, 0x85, 0x9b, 0x28, 0x47, 0x00, 0xa8, 0x90, 0xa7, 0x3f, 0x5a, 0x9e, 0x58, 0x29,
	0xb8, 0x86, 0x2c, 0x6f, 0xb7, 0x6b, 0x6e, 0xb7, 0xbb, 0xc6, 0xa2, 0xb8, 0xba, 0x24, 0x2b, 0xfb,
	0xf8, 0xbd, 0x58, 0x0e, 0x22, 0x11, 0xb6, 0x1b, 0x6e, 0x93, 0xb5, 0xcc, 0x25, 0x36, 0x9f, 0x45,
	0xf0, 0xb7, 0x3d, 0xb1, 0x9f, 0x50, 0x50, 0x01, 0x50, 0x37, 0xa9, 0x57, 0xc7, 0x65, 0x49, 0x4a,
	0xaf, 0x54, 0x44, 0xb7, 0x07, 0xda, 0x4e, 0x0b, 0xfb, 0x6c, 0xa1, 0x9b, 0x35, 0x08, 0x5e, 0x46,
	0x22, 0xf4, 0x39, 0x79, 0xf3, 0xef, 0x54, 0x36, 0x8f, 0x9c, 0xc1, 0xbe, 0x3b, 0xa5, 0xad, 0xfc,
	0x1c, 0x41, 0xa3, 0x35, 0x08, 0xf0, 0x06, 0xfa, 0xff, 0xd2, 0xe4, 0xde, 0xea, 0x9d, 0xb8, 0xbe,
	0x49, 0xb2, 0xef, 0x5e, 0x01, 0x76, 0x32, 0xe3, 0x67, 0x08, 0xf5, 0x8c, 0x58, 0xa1, 0x2f, 0xa4,
	0x0b, 0xd9, 0x77, 0xfe, 0x08, 0xa5, 0xb9, 0x1a, 0x08, 0x0f, 0xb8, 0x55, 0xfd, 0x81, 0xbf, 0x53,
	0xec, 0x7b, 0x43, 0x29, 0xa9, 0x06, 0x45, 0xd3, 0x83, 0x0e, 0xb8, 0xd4, 0x97, 0x61, 0x00, 0xc7,
	0xae, 0x0c, 0xe7, 0x74, 0x64, 0xec, 0xec, 0xdb, 0x8b, 0x83, 0x8a, 0x55, 0x5d, 0x38, 0x3a, 0x73,
	0xac, 0xe3, 0x33, 0xc7, 0xfa, 0x71, 0xe6, 0x58, 0x1f, 0xce, 0x9d, 0xcc, 0xf1, 0xb9, 0x93, 0xf9,
	0x7a, 0xee, 0x64, 0x5e, 0x61, 0xfd, 0xec, 0xee, 0x99, 0xd7, 0x5e, 0x1e, 0x70, 0x23, 0xa7, 0x9e,
	0xd8, 0x07, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xdc, 0xf6, 0xe8, 0x08, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// MatchOrder
	MatchOrder(ctx context.Context, in *MsgMatchOrder, opts ...grpc.CallOption) (*MsgMatchOrderResponse, error)
	// DepositCrossMargin
	DepositCrossMargin(ctx context.Context, in *MsgDepositCrossMargin, opts ...grpc.CallOption) (*MsgDepositCrossMarginResponse, error)
	// WithdrawCrossMargin
	WithdrawCrossMargin(ctx context.Context, in *MsgWithdrawCrossMargin, opts ...grpc.CallOption) (*MsgWithdrawCrossMarginResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/gluon.perp.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchOrder(ctx context.Context, in *MsgMatchOrder, opts ...grpc.CallOption) (*MsgMatchOrderResponse, error) {
	out := new(MsgMatchOrderResponse)
	err := c.cc.Invoke(ctx, "/gluon.perp.Msg/MatchOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositCrossMargin(ctx context.Context, in *MsgDepositCrossMargin, opts ...grpc.CallOption) (*MsgDepositCrossMarginResponse, error) {
	out := new(MsgDepositCrossMarginResponse)
	err := c.cc.Invoke(ctx, "/gluon.perp.Msg/DepositCrossMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawCrossMargin(ctx context.Context, in *MsgWithdrawCrossMargin, opts ...grpc.CallOption) (*MsgWithdrawCrossMarginResponse, error) {
	out := new(MsgWithdrawCrossMarginResponse)
	err := c.cc.Invoke(ctx, "/gluon.perp.Msg/WithdrawCrossMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// MatchOrder
	MatchOrder(context.Context, *MsgMatchOrder) (*MsgMatchOrderResponse, error)
	// DepositCrossMargin
	DepositCrossMargin(context.Context, *MsgDepositCrossMargin) (*MsgDepositCrossMarginResponse, error)
	// WithdrawCrossMargin
	WithdrawCrossMargin(context.Context, *MsgWithdrawCrossMargin) (*MsgWithdrawCrossMarginResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) MatchOrder(ctx context.Context, req *MsgMatchOrder) (*MsgMatchOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchOrder not implemented")
}
func (*UnimplementedMsgServer) DepositCrossMargin(ctx context.Context, req *MsgDepositCrossMargin) (*MsgDepositCrossMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositCrossMargin not implemented")
}
func (*UnimplementedMsgServer) WithdrawCrossMargin(ctx context.Context, req *MsgWithdrawCrossMargin) (*MsgWithdrawCrossMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCrossMargin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gluon.perp.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gluon.perp.Msg/MatchOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchOrder(ctx, req.(*MsgMatchOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositCrossMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositCrossMargin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositCrossMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gluon.perp.Msg/DepositCrossMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositCrossMargin(ctx, req.(*MsgDepositCrossMargin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawCrossMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawCrossMargin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawCrossMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gluon.perp.Msg/WithdrawCrossMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawCrossMargin(ctx, req.(*MsgWithdrawCrossMargin))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gluon.perp.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "MatchOrder",
			Handler:    _Msg_MatchOrder_Handler,
		},
		{
			MethodName: "DepositCrossMargin",
			Handler:    _Msg_DepositCrossMargin_Handler,
		},
		{
			MethodName: "WithdrawCrossMargin",
			Handler:    _Msg_WithdrawCrossMargin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gluon/perp/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMatchOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatchOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatchOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderHashSeller) > 0 {
		i -= len(m.OrderHashSeller)
		copy(dAtA[i:], m.OrderHashSeller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderHashSeller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderHashBuyer) > 0 {
		i -= len(m.OrderHashBuyer)
		copy(dAtA[i:], m.OrderHashBuyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderHashBuyer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMatchOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMatchOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMatchOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositCrossMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositCrossMargin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositCrossMargin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTx(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositCrossMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositCrossMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositCrossMarginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCrossMargin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCrossMargin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCrossMargin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTx(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCrossMarginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCrossMarginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCrossMarginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMatchOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderHashBuyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderHashSeller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMatchOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositCrossMargin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDepositCrossMarginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawCrossMargin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawCrossMarginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatchOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatchOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatchOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashBuyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashBuyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashSeller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashSeller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMatchOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMatchOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMatchOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositCrossMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositCrossMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositCrossMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, types.Coin{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositCrossMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositCrossMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositCrossMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCrossMargin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCrossMargin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCrossMargin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, types.Coin{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCrossMarginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCrossMarginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCrossMarginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
