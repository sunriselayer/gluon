// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/perp/order.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "gluon/x/order/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PerpPositionCreateOrder
type PerpPositionCreateOrder struct {
	types.BaseOrder  `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:"base"`
	IsIsolatedMargin bool `protobuf:"varint,2,opt,name=is_isolated_margin,json=isIsolatedMargin,proto3" json:"is_isolated_margin,omitempty"`
	// Zero margin is only accepted for cross margin
	MarginAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=margin_amount,json=marginAmount,proto3,customtype=cosmossdk.io/math.Int" json:"margin_amount"`
}

func (m *PerpPositionCreateOrder) Reset()         { *m = PerpPositionCreateOrder{} }
func (m *PerpPositionCreateOrder) String() string { return proto.CompactTextString(m) }
func (*PerpPositionCreateOrder) ProtoMessage()    {}
func (*PerpPositionCreateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e20fa245d287f6, []int{0}
}
func (m *PerpPositionCreateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpPositionCreateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpPositionCreateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpPositionCreateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpPositionCreateOrder.Merge(m, src)
}
func (m *PerpPositionCreateOrder) XXX_Size() int {
	return m.Size()
}
func (m *PerpPositionCreateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpPositionCreateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PerpPositionCreateOrder proto.InternalMessageInfo

func (m *PerpPositionCreateOrder) GetIsIsolatedMargin() bool {
	if m != nil {
		return m.IsIsolatedMargin
	}
	return false
}

// PerpPositionCancelOrder
type PerpPositionCancelOrder struct {
	types.BaseOrder   `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:"base"`
	PositionOrderHash string `protobuf:"bytes,2,opt,name=position_order_hash,json=positionOrderHash,proto3" json:"position_order_hash,omitempty"`
}

func (m *PerpPositionCancelOrder) Reset()         { *m = PerpPositionCancelOrder{} }
func (m *PerpPositionCancelOrder) String() string { return proto.CompactTextString(m) }
func (*PerpPositionCancelOrder) ProtoMessage()    {}
func (*PerpPositionCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e20fa245d287f6, []int{1}
}
func (m *PerpPositionCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpPositionCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpPositionCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpPositionCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpPositionCancelOrder.Merge(m, src)
}
func (m *PerpPositionCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *PerpPositionCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpPositionCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PerpPositionCancelOrder proto.InternalMessageInfo

func (m *PerpPositionCancelOrder) GetPositionOrderHash() string {
	if m != nil {
		return m.PositionOrderHash
	}
	return ""
}

func init() {
	proto.RegisterType((*PerpPositionCreateOrder)(nil), "gluon.perp.PerpPositionCreateOrder")
	proto.RegisterType((*PerpPositionCancelOrder)(nil), "gluon.perp.PerpPositionCancelOrder")
}

func init() { proto.RegisterFile("gluon/perp/order.proto", fileDescriptor_63e20fa245d287f6) }

var fileDescriptor_63e20fa245d287f6 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x27, 0x2a, 0xd2, 0x46, 0x05, 0x1d, 0xb5, 0xd6, 0x22, 0xd3, 0xd2, 0x55, 0xc1, 0x3a,
	0x03, 0xea, 0x05, 0x1c, 0x37, 0x76, 0x21, 0x96, 0x59, 0xba, 0x19, 0xd2, 0x36, 0xcc, 0x04, 0x3b,
	0x79, 0x21, 0x49, 0x41, 0x57, 0x5e, 0xc1, 0xc3, 0x78, 0x88, 0xee, 0x2c, 0xae, 0xc4, 0x45, 0x91,
	0xf6, 0x22, 0x32, 0x79, 0x15, 0xc4, 0xad, 0xbb, 0xe4, 0x7f, 0xff, 0xff, 0x91, 0x3f, 0x8f, 0xd6,
	0xb2, 0xf1, 0x04, 0x64, 0xa4, 0xb8, 0x56, 0x11, 0xe8, 0x11, 0xd7, 0xa1, 0xd2, 0x60, 0xc1, 0xa7,
	0x4e, 0x0f, 0x4b, 0xbd, 0x71, 0x3c, 0x04, 0x53, 0x80, 0x49, 0xdd, 0x24, 0xc2, 0x0b, 0xda, 0x1a,
	0x27, 0x18, 0x77, 0xc9, 0x68, 0xc0, 0x0c, 0x4f, 0x7f, 0x41, 0x1a, 0x07, 0x19, 0x64, 0x80, 0xa9,
	0xf2, 0x84, 0x6a, 0xfb, 0x8d, 0xd0, 0xa3, 0x3e, 0xd7, 0xaa, 0x0f, 0x46, 0x58, 0x01, 0xf2, 0x5a,
	0x73, 0x66, 0xf9, 0x5d, 0x99, 0xf3, 0x2f, 0xe9, 0x46, 0x49, 0xa9, 0x93, 0x16, 0xe9, 0x6c, 0x9d,
	0xd7, 0x42, 0x7c, 0x05, 0x32, 0x63, 0x66, 0xd0, 0x15, 0x57, 0xa6, 0xf3, 0xa6, 0x37, 0x9b, 0x37,
	0x49, 0xe2, 0xdc, 0x7e, 0x97, 0xfa, 0xc2, 0xa4, 0xc2, 0xc0, 0x98, 0x59, 0x3e, 0x4a, 0x0b, 0xa6,
	0x33, 0x21, 0xeb, 0x6b, 0x2d, 0xd2, 0xa9, 0x24, 0xbb, 0xc2, 0xf4, 0x56, 0x83, 0x5b, 0xa7, 0xfb,
	0x7d, 0xba, 0x83, 0x8e, 0x94, 0x15, 0x30, 0x91, 0xb6, 0xbe, 0xde, 0x22, 0x9d, 0x6a, 0x7c, 0x5a,
	0x42, 0x3f, 0xe7, 0xcd, 0x43, 0x2c, 0x68, 0x46, 0x0f, 0xa1, 0x80, 0xa8, 0x60, 0x36, 0x0f, 0x7b,
	0xd2, 0xbe, 0xbf, 0x9e, 0xd1, 0x55, 0xf3, 0x9e, 0xb4, 0xc9, 0x36, 0x12, 0xae, 0x1c, 0xa0, 0xfd,
	0xfc, 0xa7, 0x10, 0x93, 0x43, 0x3e, 0xfe, 0x4f, 0xa1, 0x90, 0xee, 0xab, 0x15, 0x0c, 0x3f, 0x34,
	0xcd, 0x99, 0xc9, 0x5d, 0xa3, 0x6a, 0xb2, 0xf7, 0x33, 0x72, 0xd9, 0x1b, 0x66, 0xf2, 0xb8, 0x3b,
	0x5d, 0x04, 0x64, 0xb6, 0x08, 0xc8, 0xd7, 0x22, 0x20, 0x2f, 0xcb, 0xc0, 0x9b, 0x2d, 0x03, 0xef,
	0x63, 0x19, 0x78, 0xf7, 0x3e, 0x2e, 0xe8, 0x11, 0x37, 0x6c, 0x9f, 0x14, 0x37, 0x83, 0x4d, 0xb7,
	0x87, 0x8b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0xf9, 0x16, 0x3a, 0xfc, 0x01, 0x00, 0x00,
}

func (m *PerpPositionCreateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpPositionCreateOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpPositionCreateOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MarginAmount.Size()
		i -= size
		if _, err := m.MarginAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.IsIsolatedMargin {
		i--
		if m.IsIsolatedMargin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PerpPositionCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpPositionCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpPositionCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionOrderHash) > 0 {
		i -= len(m.PositionOrderHash)
		copy(dAtA[i:], m.PositionOrderHash)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.PositionOrderHash)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerpPositionCreateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseOrder.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.IsIsolatedMargin {
		n += 2
	}
	l = m.MarginAmount.Size()
	n += 1 + l + sovOrder(uint64(l))
	return n
}

func (m *PerpPositionCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseOrder.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = len(m.PositionOrderHash)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PerpPositionCreateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpPositionCreateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpPositionCreateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolatedMargin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolatedMargin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpPositionCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpPositionCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpPositionCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionOrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionOrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
