// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gluon/perp/funding_rate.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FundingRate
type FundingRate struct {
	DenomBase  string        `protobuf:"bytes,1,opt,name=denom_base,json=denomBase,proto3" json:"denom_base,omitempty"`
	DenomQuote string        `protobuf:"bytes,2,opt,name=denom_quote,json=denomQuote,proto3" json:"denom_quote,omitempty"`
	Seconds    uint64        `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos      uint32        `protobuf:"varint,4,opt,name=nanos,proto3" json:"nanos,omitempty"`
	Interval   time.Duration `protobuf:"bytes,5,opt,name=interval,proto3,stdduration" json:"interval"`
	Rate       string        `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
	Price      string        `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *FundingRate) Reset()         { *m = FundingRate{} }
func (m *FundingRate) String() string { return proto.CompactTextString(m) }
func (*FundingRate) ProtoMessage()    {}
func (*FundingRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e2a67b4d4b1d13, []int{0}
}
func (m *FundingRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingRate.Merge(m, src)
}
func (m *FundingRate) XXX_Size() int {
	return m.Size()
}
func (m *FundingRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingRate.DiscardUnknown(m)
}

var xxx_messageInfo_FundingRate proto.InternalMessageInfo

func (m *FundingRate) GetDenomBase() string {
	if m != nil {
		return m.DenomBase
	}
	return ""
}

func (m *FundingRate) GetDenomQuote() string {
	if m != nil {
		return m.DenomQuote
	}
	return ""
}

func (m *FundingRate) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *FundingRate) GetNanos() uint32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func (m *FundingRate) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *FundingRate) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *FundingRate) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func init() {
	proto.RegisterType((*FundingRate)(nil), "gluon.perp.FundingRate")
}

func init() { proto.RegisterFile("gluon/perp/funding_rate.proto", fileDescriptor_e2e2a67b4d4b1d13) }

var fileDescriptor_e2e2a67b4d4b1d13 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0xe8, 0xaf, 0x2b, 0x16, 0xab, 0x83, 0xa9, 0x54, 0x37, 0x62, 0xca, 0x80, 0x12,
	0x09, 0x1e, 0x00, 0xa9, 0x42, 0xec, 0x64, 0x64, 0xa9, 0x9c, 0xe6, 0xd6, 0x8a, 0x14, 0xec, 0x60,
	0x3b, 0x08, 0xde, 0x82, 0x91, 0x47, 0xea, 0xd8, 0x91, 0x09, 0x50, 0xb2, 0xf0, 0x18, 0xc8, 0x36,
	0x65, 0xbb, 0xe7, 0x3b, 0xbe, 0xbe, 0x47, 0x07, 0x2f, 0x45, 0xdd, 0x2a, 0x99, 0x35, 0xa0, 0x9b,
	0x6c, 0xd7, 0xca, 0xb2, 0x92, 0x62, 0xa3, 0xb9, 0x85, 0xb4, 0xd1, 0xca, 0x2a, 0x82, 0xbd, 0x9d,
	0x3a, 0x7b, 0x31, 0x17, 0x4a, 0x28, 0x8f, 0x33, 0x37, 0x85, 0x17, 0x0b, 0x26, 0x94, 0x12, 0x35,
	0x64, 0x5e, 0x15, 0xed, 0x2e, 0x2b, 0x5b, 0xcd, 0x6d, 0xe5, 0x96, 0x1c, 0xb9, 0xf8, 0x41, 0x78,
	0x76, 0x17, 0x3e, 0xce, 0xb9, 0x05, 0xb2, 0xc4, 0xb8, 0x04, 0xa9, 0x1e, 0x37, 0x05, 0x37, 0x40,
	0x51, 0x8c, 0x92, 0x69, 0x3e, 0xf5, 0x64, 0xcd, 0x0d, 0x90, 0x15, 0x9e, 0x05, 0xfb, 0xa9, 0x55,
	0x16, 0xe8, 0x89, 0xf7, 0xc3, 0xc6, 0xbd, 0x23, 0x84, 0xe2, 0xb1, 0x81, 0xad, 0x92, 0xa5, 0xa1,
	0xa7, 0x31, 0x4a, 0x06, 0xf9, 0x51, 0x92, 0x39, 0x1e, 0x4a, 0x2e, 0x95, 0xa1, 0x83, 0x18, 0x25,
	0x67, 0x79, 0x10, 0xe4, 0x06, 0x4f, 0x2a, 0x69, 0x41, 0x3f, 0xf3, 0x9a, 0x0e, 0x63, 0x94, 0xcc,
	0xae, 0xce, 0xd3, 0x10, 0x39, 0x3d, 0x46, 0x4e, 0x6f, 0xff, 0x22, 0xaf, 0x27, 0xfb, 0xcf, 0x55,
	0xf4, 0xfe, 0xb5, 0x42, 0xf9, 0xff, 0x12, 0x21, 0x78, 0xe0, 0x0a, 0xa1, 0x23, 0x1f, 0xc5, 0xcf,
	0xee, 0x54, 0xa3, 0xab, 0x2d, 0xd0, 0xb1, 0x87, 0x41, 0xac, 0x2f, 0xf7, 0x1d, 0x43, 0x87, 0x8e,
	0xa1, 0xef, 0x8e, 0xa1, 0xb7, 0x9e, 0x45, 0x87, 0x9e, 0x45, 0x1f, 0x3d, 0x8b, 0x1e, 0x48, 0x68,
	0xf9, 0x25, 0xf4, 0x6c, 0x5f, 0x1b, 0x30, 0xc5, 0xc8, 0x9f, 0xbf, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x75, 0xee, 0x54, 0x85, 0x82, 0x01, 0x00, 0x00,
}

func (m *FundingRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintFundingRate(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Rate) > 0 {
		i -= len(m.Rate)
		copy(dAtA[i:], m.Rate)
		i = encodeVarintFundingRate(dAtA, i, uint64(len(m.Rate)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFundingRate(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if m.Nanos != 0 {
		i = encodeVarintFundingRate(dAtA, i, uint64(m.Nanos))
		i--
		dAtA[i] = 0x20
	}
	if m.Seconds != 0 {
		i = encodeVarintFundingRate(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DenomQuote) > 0 {
		i -= len(m.DenomQuote)
		copy(dAtA[i:], m.DenomQuote)
		i = encodeVarintFundingRate(dAtA, i, uint64(len(m.DenomQuote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomBase) > 0 {
		i -= len(m.DenomBase)
		copy(dAtA[i:], m.DenomBase)
		i = encodeVarintFundingRate(dAtA, i, uint64(len(m.DenomBase)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFundingRate(dAtA []byte, offset int, v uint64) int {
	offset -= sovFundingRate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundingRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomBase)
	if l > 0 {
		n += 1 + l + sovFundingRate(uint64(l))
	}
	l = len(m.DenomQuote)
	if l > 0 {
		n += 1 + l + sovFundingRate(uint64(l))
	}
	if m.Seconds != 0 {
		n += 1 + sovFundingRate(uint64(m.Seconds))
	}
	if m.Nanos != 0 {
		n += 1 + sovFundingRate(uint64(m.Nanos))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovFundingRate(uint64(l))
	l = len(m.Rate)
	if l > 0 {
		n += 1 + l + sovFundingRate(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovFundingRate(uint64(l))
	}
	return n
}

func sovFundingRate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFundingRate(x uint64) (n int) {
	return sovFundingRate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundingRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundingRate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundingRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundingRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundingRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundingRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomQuote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundingRate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundingRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundingRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundingRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundingRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundingRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundingRate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundingRate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFundingRate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFundingRate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundingRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFundingRate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFundingRate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFundingRate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFundingRate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFundingRate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFundingRate = fmt.Errorf("proto: unexpected end of group")
)
